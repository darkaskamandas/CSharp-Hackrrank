using System;
using System.Collections.Generic;
using System.IO;
class Solution
{
    static void Main(String[] args)
    {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        string[] inputData = Console.ReadLine().Split(' ');
        int[] inputInt = Array.ConvertAll(inputData, s => int.Parse(s));
        int segment = inputInt[1];
        int index = inputInt[2];

        string[] inputArray = Console.ReadLine().Split(' ');
        int[] array = Array.ConvertAll(inputArray, s => int.Parse(s));
        int[] helper = new int[array.Length];
        int low = int.MinValue; int high = int.MaxValue; int lowB = int.MinValue; int highB = int.MaxValue;
        bool isIndex = false; bool isNonIndex = false;
        for (int j = 0; j < segment; j++)
        {
            string[] inputSeg = Console.ReadLine().Split(' ');
            int[] arraySeg = Array.ConvertAll(inputSeg, s => int.Parse(s));

            if((low == int.MinValue || arraySeg[0]<low ) && ( arraySeg[0] <= index && arraySeg[1] >= index))
            {
                if(!isIndex && !isNonIndex) {
                    isIndex = true;
                }
                low = arraySeg[0];
            }
            else if((lowB == int.MinValue || arraySeg[0] < lowB ))
            {
                if(!isIndex && !isNonIndex) {
                    isNonIndex = true;
                }
                  lowB = arraySeg[0];
            }
            if(high == int.MaxValue || arraySeg[1] > high && (arraySeg[0] <= index && arraySeg[1] >= index))
            {
                  if(!isIndex && !isNonIndex) {
                    isIndex = true;
                }
                high = arraySeg[1];
            }
             else if (highB== int.MaxValue || arraySeg[1] > highB)
            {
              if(!isIndex && !isNonIndex) {
                    isNonIndex = true;
                }
                   highB = arraySeg[1];
             }

       
        }
        if(lowB != int.MinValue && highB != int.MaxValue && isNonIndex)
        {
            array = MergeSort(array, helper, lowB,highB);
        }
        if(low != int.MinValue && high != int.MaxValue && (low<= index || high >= index))
        {
            array = MergeSort(array, helper, low,high);
        }
       
        Console.WriteLine(array[index]);

    }
    public static int[] MergeSort(int[] array, int[] helper, int low, int high)
    {
        ////need to divide the array and then sort merge
        // need to divide till we get last element
        //need to divide based on median into left half and right half
        //this would be recursive program
        if (low < high)
        {
            int median = (low + high) / 2;
            int mergeLeft = median; // dividing array in left half
            int mergeRight = median + 1; // dividing array in right half
                                         //sorting left half
            MergeSort(array, helper, low, mergeLeft);
            //sorting right half
            MergeSort(array, helper, mergeRight, high);
            //Merge both array
            array = Merge(array, helper, low, median, high);
        }
        return array;
    }

    public static int[] Merge(int[] array, int[] helper, int low, int median, int high)
    {
        //copy array to temp array for merging
        // i<=high because 
        // for 0 as low and 1 as high we need to include 0 & 1
        for (int i = low; i <= high; i++)
        {
            helper[i] = array[i];
        }

        //need to compare left side with right and merge 
        int helperLeft = median;
        int helperRight = median + 1;
        int current = low; // tracking the current element to merge
        while (low <= helperLeft && helperRight <= high)
        {
            if (helper[low] <= helper[helperRight])
            {
                array[current] = helper[low];
                low++;
            }
            else
            {
                array[current] = helper[helperRight];
                helperRight++;
            }
            current++;
        }

        //adding remaining - we need to consider element of only one side as other side would be part of array
        int remaining = helperLeft - low;
        for (int i = 0; i <= remaining; i++)
        {
            array[current + i] = helper[low + i];
        }
        return array;
    }
}