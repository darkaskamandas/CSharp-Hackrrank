using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;

// (?°?°)????????????????????????????
public class Solver
{
    public object Solve()
    {
        for (int tt = ReadInt(); tt > 0; tt--)
        {
            int n = ReadInt();

            if (n == 0)
            {
                writer.WriteLine(0);
                continue;
            }

            var dict = new Dictionary<int, int>();
            for (int i = 0; i < n; i++)
            {
                int a = ReadInt();
                if (!dict.ContainsKey(a))
                    dict[a] = 0;
                dict[a]++;
            }

            var list = dict.ToList();
            list.Sort((p1, p2) => p1.Key.CompareTo(p2.Key));

            int l = 1, r = n;
            int ans = 1;
            while (l <= r)
            {
                int m = (l + r) / 2;
                var q = new Queue<int>();
                int p = int.MinValue;
                bool ok = true;
                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i].Key > p + 1)
                    {
                        while (q.Count > 0)
                        {
                            int x = q.Dequeue();
                            if (i - x < m)
                            {
                                ok = false;
                                break;
                            }
                        }
                        for (int j = 0; j < list[i].Value; j++)
                            q.Enqueue(i);
                    }
                    else
                    {
                        while (list[i].Value > q.Count)
                            q.Enqueue(i);
                        while (list[i].Value < q.Count)
                        {
                            int x = q.Dequeue();
                            if (i - x < m)
                            {
                                ok = false;
                                break;
                            }
                        }
                    }
                    p = list[i].Key;
                }
                while (q.Count > 0)
                {
                    int x = q.Dequeue();
                    if (list.Count - x < m)
                    {
                        ok = false;
                        break;
                    }
                }
                if (ok)
                {
                    l = m + 1;
                    ans = Math.Max(ans, m);
                }
                else
                    r = m - 1;
            }

            writer.WriteLine(ans);
        }
        return null;
    }

    #region Main

    protected static TextReader reader;
    protected static TextWriter writer;

    static void Main()
    {
#if DEBUG
        reader = new StreamReader("..\\..\\input.txt");
        writer = Console.Out;
        //writer = new StreamWriter("..\\..\\output.txt");
#else
        reader = new StreamReader(Console.OpenStandardInput());
        writer = new StreamWriter(Console.OpenStandardOutput());
#endif
        try
        {
            var ts = DateTime.Now;
            object result = new Solver().Solve();
            if (result != null)
                writer.WriteLine(result);
        }
        catch (Exception ex)
        {
#if DEBUG
            Console.WriteLine(ex);
#else
            throw;
#endif
        }
        reader.Close();
        writer.Close();
    }

    #endregion

    #region Read/Write

    private static Queue<string> currentLineTokens = new Queue<string>();

    private static string[] ReadAndSplitLine()
    {
        return reader.ReadLine().Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
    }

    public static string ReadToken()
    {
        while (currentLineTokens.Count == 0)
            currentLineTokens = new Queue<string>(ReadAndSplitLine());
        return currentLineTokens.Dequeue();
    }

    public static int ReadInt()
    {
        return int.Parse(ReadToken());
    }

    public static long ReadLong()
    {
        return long.Parse(ReadToken());
    }

    public static double ReadDouble()
    {
        return double.Parse(ReadToken(), CultureInfo.InvariantCulture);
    }

    public static int[] ReadIntArray()
    {
        return ReadAndSplitLine().Select(int.Parse).ToArray();
    }

    public static long[] ReadLongArray()
    {
        return ReadAndSplitLine().Select(long.Parse).ToArray();
    }

    public static double[] ReadDoubleArray()
    {
        return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray();
    }

    public static int[][] ReadIntMatrix(int numberOfRows)
    {
        int[][] matrix = new int[numberOfRows][];
        for (int i = 0; i < numberOfRows; i++)
            matrix[i] = ReadIntArray();
        return matrix;
    }

    public static int[][] ReadAndTransposeIntMatrix(int numberOfRows)
    {
        int[][] matrix = ReadIntMatrix(numberOfRows);
        int[][] ret = new int[matrix[0].Length][];
        for (int i = 0; i < ret.Length; i++)
        {
            ret[i] = new int[numberOfRows];
            for (int j = 0; j < numberOfRows; j++)
                ret[i][j] = matrix[j][i];
        }
        return ret;
    }

    public static string[] ReadLines(int quantity)
    {
        string[] lines = new string[quantity];
        for (int i = 0; i < quantity; i++)
            lines[i] = reader.ReadLine().Trim();
        return lines;
    }

    public static void WriteArray<T>(IEnumerable<T> array)
    {
        writer.WriteLine(string.Join(" ", array));
    }

    #endregion
}